// Generated by CIRCT firtool-1.62.1
module EthernetPCSTXFSM(
  input        clock,
               reset,
               io_config,
  input  [1:0] io_indication,
  input        io_pcs_reset,
               io_tx_er,
               io_tx_en,
  input  [7:0] io_txd,
  input  [8:0] io_sdn,
  input        io_receive1000BT,
  input  [2:0] io_tx_symb_vector_encoded_0,
               io_tx_symb_vector_encoded_1,
               io_tx_symb_vector_encoded_2,
               io_tx_symb_vector_encoded_3,
  output       io_col,
  input        io_tx_symb_vector_ready,
  output       io_tx_symb_vector_valid,
  output [2:0] io_tx_symb_vector_bits_0,
               io_tx_symb_vector_bits_1,
               io_tx_symb_vector_bits_2,
               io_tx_symb_vector_bits_3,
  output [3:0] io_state_test
);

  reg  [3:0] state;
  wire       _GEN = state == 4'h0;
  wire       _GEN_0 = state == 4'h1;
  wire       _GEN_1 = state == 4'h2;
  wire       _GEN_2 = state == 4'h3;
  wire       _GEN_3 = state == 4'h4;
  wire       _GEN_4 = state == 4'h5;
  wire       _GEN_5 = state == 4'h6;
  wire       _GEN_6 = state == 4'h7;
  wire       _GEN_7 = state == 4'h8;
  wire       _GEN_8 = state == 4'h9;
  wire       _GEN_9 = state == 4'hA;
  wire       io_tx_symb_vector_valid_0 =
    _GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_6 | _GEN_7 | _GEN_8
    | _GEN_9;
  wire       _GEN_10 = _GEN_8 | _GEN_9;
  wire       _GEN_11 = _GEN_6 | _GEN_7;
  wire [2:0] _GEN_12 = _GEN_11 ? 3'h2 : _GEN_10 ? 3'h6 : 3'h0;
  wire       _GEN_13 = _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4;
  always @(posedge clock) begin
    if (reset)
      state <= 4'h0;
    else begin
      automatic logic             PUDR =
        io_tx_symb_vector_ready & io_tx_symb_vector_valid_0;
      automatic logic             _GEN_14 = io_tx_en & io_tx_er & PUDR;
      automatic logic             _GEN_15 = io_tx_en & ~io_tx_er & PUDR;
      automatic logic             _GEN_16 = ~io_tx_en & ~io_tx_er & PUDR;
      automatic logic [15:0][3:0] _GEN_17 =
        {{state},
         {state},
         {state},
         {state},
         {state},
         {PUDR ? 4'h7 : 4'hA},
         {PUDR ? 4'hA : 4'h9},
         {{~PUDR, 3'h0}},
         {PUDR ? 4'h8 : 4'h7},
         {_GEN_14 ? 4'h5 : _GEN_15 | ~_GEN_16 ? 4'h6 : 4'h9},
         {_GEN_14 ? 4'h5 : _GEN_15 ? 4'h6 : _GEN_16 ? 4'h9 : 4'h5},
         {{3'h2, PUDR}},
         {PUDR ? 4'h4 : 4'h3},
         {_GEN_14 ? 4'h5 : _GEN_15 ? 4'h6 : _GEN_16 ? 4'h9 : 4'h2},
         {~io_tx_er & PUDR ? 4'h2 : io_tx_er & PUDR ? 4'h4 : 4'h1},
         {~io_tx_en & PUDR ? 4'h0 : _GEN_14 ? 4'h3 : {3'h0, _GEN_15}}};
      state <= _GEN_17[state];
    end
  end // always @(posedge)
  assign io_col =
    ~_GEN & (_GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5) & io_receive1000BT;
  assign io_tx_symb_vector_valid = io_tx_symb_vector_valid_0;
  assign io_tx_symb_vector_bits_0 =
    _GEN
      ? 3'h0
      : _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3
          ? 3'h2
          : _GEN_4
              ? 3'h0
              : _GEN_5
                  ? io_tx_symb_vector_encoded_0
                  : {1'h0, _GEN_6 | _GEN_7 | _GEN_10, 1'h0};
  assign io_tx_symb_vector_bits_1 =
    _GEN ? 3'h0 : _GEN_13 ? 3'h2 : _GEN_5 ? io_tx_symb_vector_encoded_1 : _GEN_12;
  assign io_tx_symb_vector_bits_2 =
    _GEN ? 3'h0 : _GEN_13 ? 3'h2 : _GEN_5 ? io_tx_symb_vector_encoded_2 : _GEN_12;
  assign io_tx_symb_vector_bits_3 =
    _GEN
      ? 3'h0
      : _GEN_0
          ? 3'h2
          : _GEN_1
              ? 3'h6
              : _GEN_2
                  ? 3'h2
                  : _GEN_3
                      ? 3'h6
                      : _GEN_4
                          ? 3'h0
                          : _GEN_5
                              ? io_tx_symb_vector_encoded_3
                              : _GEN_11 ? 3'h6 : {1'h0, _GEN_10, 1'h0};
  assign io_state_test = state;
endmodule

